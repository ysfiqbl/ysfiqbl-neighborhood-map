$(document).ready(function() {
    var Category = function(title) {
        var self = this;
        self.title = ko.observable(category);
    }

    function Location(map, lat, lng) {
        var self = this;

        self.marker = new google.maps.Marker({
            position: new google.maps.LatLng(lat, lng),
            map: map,
            draggable: true
        });

        self.title = ko.observable('')
        self.category = ko.observable();
        self.labels = ko.observableArray();
        self.lat = ko.observable(lat);
        self.lng = ko.observable(lng);
    }
    (function() {
        this.setCategory = function(category) {
            this.category(category);
        };

        this.addLabel = function(label) {
            if (this.categories.indexOf(category) < 0) {
                this.categories.push(category);
            } else {
                alert("Location already belongs to category.");
            }
        };

        this.removeLabel = function(category) {
            this.categories.remove(category);
        };
    }).call(Location.prototype);

    var ViewModel = function() {
        var self = this;
        self.localStoreLocations = [];
        self.allLocations = ko.observableArray();
        self.visibleLocations = ko.observableArray();
        self.map;
        self.infowindow = undefined;
        self.locationSearchQuery = ko.observable('');
        self.locationSearchSuggestions = ko.computed(function() {
            var query = self.locationSearchQuery().toLowerCase();
            return ko.utils.arrayFilter(self.localStoreLocations, function(loc) {
                return loc.title.toLowerCase().indexOf(query) > -1;
            });
        });

        self.showLocationSuggestions = ko.observable(false);

        /**
         * Set the ko observable used to track whether the search suggestions should be shown to true.
         * This function is triggered everytime the search input box is clicked and it is required since
         * this observable is set to false to hide the div everytime a search suggestions is clicked. The
         * observable is set to false in the self.showLocation function.
         */
        self.initializeSearchText = function() {
            self.showLocationSuggestions(true);
        };

        /**
         * A computed observable that tracks whether the location search suggestion div should be shown or not.
         * The location search suggestions are shown if
         * The self.showLocationSuggestions observable is true
         * The search query is not an empty string ''
         * The locationsSearchSuggestions array has any elements it. i.e. the search query has matching suggestions.
         *
         * @return {show}   variable determines whether the location search suggestions are shown or not.
         */
        self.showLocationSearchDiv = ko.computed(function() {
            var show = false;
            if (self.showLocationSuggestions() === false) {
                show = false;
            } else if (self.locationSearchQuery() == '') {
                show = false;
            } else if (self.locationSearchSuggestions().length > 0) {
                show = true;
            } else {
                show = false;
            }

            return show;
        });

        /**
         * Initialize the map.
         */
        self.initialize = function() {
            self.mapOptions = {
                zoom: 8,
                center: new google.maps.LatLng(-34.397, 150.644),
                panControl: true,
                panControlOptions: {
                    position: google.maps.ControlPosition.RIGHT_BOTTOM
                },
                zoomControl: true,
                zoomControlOptions: {
                    style: google.maps.ZoomControlStyle.SMALL,
                    position: google.maps.ControlPosition.RIGHT_BOTTOM
                }
            };
            self.map = new google.maps.Map(document.getElementById('map-canvas'), self.mapOptions);

            self.loadLocations();

            google.maps.event.addListener(self.map, 'click', function(event) {
                var loc = new Location(self.map, event.latLng.lat(), event.latLng.lng());
                self.addLocationEventListeners(loc);
                google.maps.event.trigger(loc.marker, 'click');
            });

        }

        google.maps.event.addDomListener(window, 'load', self.initialize);


        /**
         * Remove location from the map, self.allLocations array and local storage.
         * The index of the location in the self.allLocations and self.localStoreLocations
         * should be the same.
         *
         * @param  {Location} loc location to be removed
         */
        self.removeLocation = function(loc) {
            loc.marker.setMap(null);
            var index = self.allLocations.indexOf(loc);
            if (index > -1) {
                self.allLocations.remove(loc);
                self.localStoreLocations.splice(index, 1);
                localStorage.locations = JSON.stringify(self.localStoreLocations);
            }
        };

        /**
         * Add event listeners to marker. Currently the click event is the only one that is being used
         * @param {Location} loc Location to add the event listener to.
         */
        self.addLocationEventListeners = function(loc) {
            google.maps.event.addListener(loc.marker, 'click', function() {
                self.showLocation(loc);
                self.locationSearchQuery('');
            });
        };

        /**
         * Show the selected location from the search or clicked marker by opening the info window
         * and changeing the text in the search field to the locations title.
         * This function is called when the search button is clicked, a location title is selected from the
         * search suggestions or a marker is clicked.
         *
         * If a marker is clicked the loc parameter will be a Location object.
         * Else it will be one of the JSON objects stored in the self.localStoreLocations array.
         *
         * @param  {Location object or JSON object} loc Location to be shown.
         * @return -1 if the location index cannot be found
         */
        self.showLocation = function(loc) {
            self.showSuggestions(false);

            if (!(loc instanceof Location)) {
                var index = self.localStoreLocations.indexOf(loc);
                if (index > -1) {
                    loc = self.allLocations()[index];
                } else {
                    return -1;
                }
            }

            self.locationSearchQuery(loc.title());
            if (self.infowindow === undefined || self.infowindow.marker !== loc.marker) {
                if (self.infowindow !== undefined) {
                    self.infowindow.close();
                }

                var div = document.createElement('div');
                var input = document.createElement('input');
                input.type = 'text';
                input.value = loc.title();
                div.appendChild(input);

                var saveBtn = document.createElement('button');
                saveBtn.innerHTML = 'Save';
                saveBtn.addEventListener('click', (function(l) {
                    return function() {
                        l.title(input.value);
                        self.saveLocation(l);
                    }
                })(loc));

                div.appendChild(saveBtn);

                var deleteBtn = document.createElement('button');
                deleteBtn.innerHTML = 'Delete';
                deleteBtn.addEventListener('click', (function(l) {
                    return function() {
                        self.removeLocation(l);
                    }
                })(loc));

                div.appendChild(deleteBtn);

                self.infowindow = new google.maps.InfoWindow({
                    content: div
                })
                self.infowindow.marker = loc.marker;
                self.infowindow.open(self.map, loc.marker);
            }
        }

        /**
         * Create or update location in local storage and the allLocations array.
         *
         * If the index of location is greater than -1 then the location already
         * exists in the self.allLocations therefore it will exist in the
         * self.localStoreLocations array as well.
         * Else the location is new and needs to be added to both the arrays.
         *
         * @param  {Location} loc Location to be added or updated.
         */
        self.saveLocation = function(loc) {
            var index = self.allLocations.indexOf(loc);
            var locationJSON = {
                'title': loc.title(),
                'lat': loc.marker.getPosition().lat(),
                'lng': loc.marker.getPosition().lng(),
                'labels': loc.labels(),
                'category': loc.category()
            }

            if (index > -1) {
                self.allLocations[index] = loc;
                self.localStoreLocations[index] = locationJSON;
            } else {
                self.allLocations.push(loc);
                self.localStoreLocations.push(locationJSON);
            }

            localStorage.locations = JSON.stringify(self.localStoreLocations);
        };

        /**
         * Draw previously saved locations on the screen and initialize the self.localStoreLocations
         * and self.allLocations arrays.
         *
         * These locations are saved as a JSON string in the browsers localStorage.
         */
        self.loadLocations = function() {
            if (localStorage.locations) {
                self.localStoreLocations = JSON.parse(localStorage.locations);
                for (var i = 0; i < self.localStoreLocations.length; i++) {
                    var locationJSON = self.localStoreLocations[i];
                    var loc = new Location(self.map, locationJSON.lat, locationJSON.lng);
                    loc.title(locationJSON.title);
                    self.addLocationEventListeners(loc);
                    self.allLocations.push(loc);
                }
            }
        }
    };

    ko.applyBindings(new ViewModel());
});