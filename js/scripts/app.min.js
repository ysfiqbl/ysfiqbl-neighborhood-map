$(document).ready(function() {
    var Category = function(title) {
        var self = this;
        self.title = ko.observable(category);
    }

    function Location(map, lat, lng) {
        var self = this;

        self.marker = new google.maps.Marker({
            position: new google.maps.LatLng(lat, lng),
            map: map,
            draggable: true,
        });

        self.title = ko.observable('')
        self.category = ko.observable();
        self.labels = ko.observableArray();
        self.lat = ko.observable(lat);
        self.lng = ko.observable(lng);
    }
    (function() {
        this.setCategory = function(category) {
            this.category(category);
        };

        this.addLabel = function(label) {
            if (this.categories.indexOf(category) < 0) {
                this.categories.push(category);
            } else {
                alert("Location already belongs to category.");
            }
        };

        this.removeLabel = function(category) {
            this.categories.remove(category);
        };
    }).call(Location.prototype);

    var ViewModel = function() {
        var self = this;
        self.localStoreLocations = [];
        self.allLocations = ko.observableArray();
        self.visibleLocations = ko.observableArray();
        self.map;

        self.initialize = function() {
            self.mapOptions = {
                zoom: 8,
                center: new google.maps.LatLng(-34.397, 150.644),
                panControl: true,
                panControlOptions: {
                    position: google.maps.ControlPosition.RIGHT_BOTTOM
                },
                zoomControl: true,
                zoomControlOptions: {
                    style: google.maps.ZoomControlStyle.SMALL,
                    position: google.maps.ControlPosition.RIGHT_BOTTOM
                }
            };
            self.map = new google.maps.Map(document.getElementById('map-canvas'), self.mapOptions);

            self.loadLocations();

            google.maps.event.addListener(self.map, 'click', function(event) {
                var loc = new Location(self.map, event.latLng.lat(), event.latLng.lng());
                self.addLocationEventListeners(loc);
                google.maps.event.trigger(loc.marker, 'click');
            });

        }

        google.maps.event.addDomListener(window, 'load', self.initialize);

        /**
         * Remove location from the map, self.allLocations array and local storage.
         * The index of the location in the self.allLocations and self.localStoreLocations
         * should be the same.
         *
         * @param  {Location} loc location to be removed
         */
        self.removeLocation = function(loc) {
            console.log(self.localStoreLocations);
            loc.marker.setMap(null);
            var index = self.allLocations.indexOf(loc);

            if (index > -1) {
                self.allLocations.remove(loc);
                var r = self.localStoreLocations.splice(index, 1);
                localStorage.locations = JSON.stringify(self.localStoreLocations);
                console.log(r);
                console.log(self.localStoreLocations);
            }
        };

        self.addLocationEventListeners = function(loc) {

            google.maps.event.addListener(loc.marker, 'click', function() {
                var div = document.createElement('div');
                var input = document.createElement('input');
                input.type = 'text';
                input.value = loc.title();
                div.appendChild(input);

                var saveBtn = document.createElement('button');
                saveBtn.innerHTML = 'Save';
                saveBtn.addEventListener('click', (function(l) {
                    return function() {
                        l.title(input.value);
                        self.saveLocation(l);
                    }
                })(loc));

                div.appendChild(saveBtn);

                var deleteBtn = document.createElement('button');
                deleteBtn.innerHTML = 'Delete';
                deleteBtn.addEventListener('click', (function(l) {
                    return function() {
                        self.removeLocation(l);
                    }
                })(loc));

                div.appendChild(deleteBtn);

                var infowindow = new google.maps.InfoWindow({
                    content: div
                })
                infowindow.open(self.map, loc.marker)
            });
        };

        /**
         * Create or update location in local storage and the allLocations array.
         *
         * If the index of location is greater than -1 then the location already
         * exists in the self.allLocations therefore it will exist in the
         * self.localStoreLocations array as well.
         * Else the location is new and needs to be added to both the arrays.
         *
         * @param  {Location} loc Location to be added or updated.
         */
        self.saveLocation = function(loc) {
            var index = self.allLocations.indexOf(loc);
            var locationJSON = {
                'title': loc.title(),
                'lat': loc.marker.getPosition().lat(),
                'lng': loc.marker.getPosition().lng(),
                'labels': loc.labels(),
                'category': loc.category()
            }

            if (index > -1) {
                self.allLocations[index] = loc;
                self.localStoreLocations[index] = locationJSON;
            } else {
                self.allLocations.push(loc);
                self.localStoreLocations.push(locationJSON);
            }

            localStorage.locations = JSON.stringify(self.localStoreLocations);
        };

        self.loadLocations = function() {
            if (localStorage.locations) {
                self.localStoreLocations = JSON.parse(localStorage.locations);
                for (var i = 0; i < self.localStoreLocations.length; i++) {
                    var locationJSON = self.localStoreLocations[i];
                    var loc = new Location(self.map, locationJSON.lat, locationJSON.lng);
                    loc.title(locationJSON.title);
                    self.addLocationEventListeners(loc);
                    self.allLocations.push(loc);
                }
            }
        }
    };

    ko.applyBindings(new ViewModel());
});